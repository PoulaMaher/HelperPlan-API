// <auto-generated />
using System;
using HelperPlan.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HelperPlan.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240615164248_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.AboutYou", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AboutYouSubId")
                        .HasColumnType("int");

                    b.Property<int>("OffersToCandidateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AboutYouSubId");

                    b.HasIndex("OffersToCandidateId");

                    b.ToTable("AboutYou");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AboutYouId")
                        .HasColumnType("int");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("JobDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("JobRequirmentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AboutYouId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobDetailsId");

                    b.HasIndex("JobRequirmentsId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceivePrivilegedAndDiscountOffers")
                        .HasColumnType("bit");

                    b.Property<bool>("SubscribeToOurTipsAndNewsletters")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("JobDetails");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobRequirments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasicInformationId")
                        .HasColumnType("int");

                    b.Property<int>("CandidatePreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSkillsAndDutiesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasicInformationId");

                    b.HasIndex("CandidatePreferenceId");

                    b.HasIndex("RequiredSkillsAndDutiesId");

                    b.ToTable("JobRequirments");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.AboutYouSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveByEmail")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployerTypeId");

                    b.ToTable("AboutYouSub");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.EmployerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FamilyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HavePets")
                        .HasColumnType("bit");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployerType");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.OffersToCandidate.MonthlySalaryOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxSalary")
                        .HasColumnType("int");

                    b.Property<int?>("MinSalary")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlySalary")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MonthlySalaryOffer");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.offersToCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accomodation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayOFF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonthlySalaryOfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonthlySalaryOfferId");

                    b.ToTable("offersToCandidate");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobSubBranches.JobRequirmentsClass.BasicInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionOffered")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BasicInformation");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobSubBranches.JobRequirmentsClass.CandidatePreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienceYearsRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferedCandidateContract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferedCandidateLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CandidatePreference");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.RequiredSkillsAndDuties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CookingSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MostImportantSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequiredSkillsAndDuties");
                });

            modelBuilder.Entity("HelperPlan.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("HelperPlan.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HelperPlan.Models.AspNetFaceBookUsers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FaceBookUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginalApplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OriginalApplicationUserId");

                    b.ToTable("AspNetFaceBookUsers");
                });

            modelBuilder.Entity("HelperPlan.Models.CookingSkills", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CandidateID");

                    b.ToTable("CookingSkills");
                });

            modelBuilder.Entity("HelperPlan.Models.Education", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletionYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("CrsDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasComplete")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CandidateID");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("HelperPlan.Models.Experience", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<string>("Duties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndYear")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasLetterRef")
                        .HasColumnType("bit");

                    b.Property<string>("JobPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkingCountry")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CandidateID");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("HelperPlan.Models.Languages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CandidateID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("HelperPlan.Models.MainSkills", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CandidateID");

                    b.ToTable("MainSkills");
                });

            modelBuilder.Entity("HelperPlan.Models.OtherSkills", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CandidateID");

                    b.ToTable("OtherSkills");
                });

            modelBuilder.Entity("HelperPlan.Models.Plan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("HelperPlan.Models.Subscribtion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CheckUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.Property<int>("PlanID1")
                        .HasColumnType("int");

                    b.Property<int?>("PlanID2")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscribtionsStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("orderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PlanID");

                    b.HasIndex("PlanID2")
                        .IsUnique()
                        .HasFilter("[PlanID2] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("Subscribtion");
                });

            modelBuilder.Entity("HelperPlan.Models.SubscribtionHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("EmployerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmployerId");

                    b.HasIndex("UserID");

                    b.ToTable("SubscribtionHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HelperPlan.Models.Candidate", b =>
                {
                    b.HasBaseType("HelperPlan.Models.ApplicationUser");

                    b.Property<string>("AccomodationPref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AvailabilityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExepectedSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPassport")
                        .HasColumnType("bit");

                    b.Property<string>("JobType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MartialStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoKids")
                        .HasColumnType("int");

                    b.Property<string>("PerferedDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatappNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("workexperience")
                        .HasColumnType("int");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("HelperPlan.Models.Employer", b =>
                {
                    b.HasBaseType("HelperPlan.Models.ApplicationUser");

                    b.Property<string>("Accomodation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdultNo")
                        .HasColumnType("int");

                    b.Property<string>("DayOff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBet")
                        .HasColumnType("bit");

                    b.Property<int>("KidsNo")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SubscribtionID")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("varchar(200)");

                    b.HasIndex("SubscribtionID");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.AboutYou", b =>
                {
                    b.HasOne("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.AboutYouSub", "AboutYouSub")
                        .WithMany()
                        .HasForeignKey("AboutYouSubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.offersToCandidate", "OffersToCandidate")
                        .WithMany()
                        .HasForeignKey("OffersToCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutYouSub");

                    b.Navigation("OffersToCandidate");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.Job", b =>
                {
                    b.HasOne("HelperPlan.DTO.JobDTO.AboutYou", "AboutYou")
                        .WithMany()
                        .HasForeignKey("AboutYouId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelperPlan.Models.Employer", "Employer")
                        .WithMany("Jobs")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelperPlan.DTO.JobDTO.JobDetails", "JobDetails")
                        .WithMany()
                        .HasForeignKey("JobDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelperPlan.DTO.JobDTO.JobRequirments", "JobRequirments")
                        .WithMany()
                        .HasForeignKey("JobRequirmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutYou");

                    b.Navigation("Employer");

                    b.Navigation("JobDetails");

                    b.Navigation("JobRequirments");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobRequirments", b =>
                {
                    b.HasOne("HelperPlan.DTO.JobDTO.JobSubBranches.JobRequirmentsClass.BasicInformation", "BasicInformation")
                        .WithMany()
                        .HasForeignKey("BasicInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelperPlan.DTO.JobDTO.JobSubBranches.JobRequirmentsClass.CandidatePreference", "CandidatePreference")
                        .WithMany()
                        .HasForeignKey("CandidatePreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelperPlan.DTO.JobDTO.RequiredSkillsAndDuties", "RequiredSkillsAndDuties")
                        .WithMany()
                        .HasForeignKey("RequiredSkillsAndDutiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicInformation");

                    b.Navigation("CandidatePreference");

                    b.Navigation("RequiredSkillsAndDuties");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.AboutYouSub", b =>
                {
                    b.HasOne("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.EmployerType", "EmployerType")
                        .WithMany()
                        .HasForeignKey("EmployerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployerType");
                });

            modelBuilder.Entity("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.offersToCandidate", b =>
                {
                    b.HasOne("HelperPlan.DTO.JobDTO.JobSubBranches.AboutYouClass.OffersToCandidate.MonthlySalaryOffer", "MonthlySalaryOffer")
                        .WithMany()
                        .HasForeignKey("MonthlySalaryOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthlySalaryOffer");
                });

            modelBuilder.Entity("HelperPlan.Models.AspNetFaceBookUsers", b =>
                {
                    b.HasOne("HelperPlan.Models.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("OriginalApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("HelperPlan.Models.CookingSkills", b =>
                {
                    b.HasOne("HelperPlan.Models.Candidate", "Candidate")
                        .WithMany("CookingSkills")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("HelperPlan.Models.Education", b =>
                {
                    b.HasOne("HelperPlan.Models.Candidate", "Candidate")
                        .WithMany("Educations")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("HelperPlan.Models.Experience", b =>
                {
                    b.HasOne("HelperPlan.Models.Candidate", "Candidate")
                        .WithMany("Experiences")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("HelperPlan.Models.Languages", b =>
                {
                    b.HasOne("HelperPlan.Models.Candidate", "Candidate")
                        .WithMany("Languages")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("HelperPlan.Models.MainSkills", b =>
                {
                    b.HasOne("HelperPlan.Models.Candidate", "Candidate")
                        .WithMany("MainSkills")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("HelperPlan.Models.OtherSkills", b =>
                {
                    b.HasOne("HelperPlan.Models.Candidate", "Candidate")
                        .WithMany("OtherSkills")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("HelperPlan.Models.Subscribtion", b =>
                {
                    b.HasOne("HelperPlan.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HelperPlan.Models.Plan", null)
                        .WithOne("Subscribtion")
                        .HasForeignKey("HelperPlan.Models.Subscribtion", "PlanID2");

                    b.HasOne("HelperPlan.Models.ApplicationUser", "Employer")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("HelperPlan.Models.SubscribtionHistory", b =>
                {
                    b.HasOne("HelperPlan.Models.Employer", null)
                        .WithMany("SubscribtionHistories")
                        .HasForeignKey("EmployerId");

                    b.HasOne("HelperPlan.Models.ApplicationUser", "Employer")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HelperPlan.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HelperPlan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HelperPlan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HelperPlan.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelperPlan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HelperPlan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelperPlan.Models.Candidate", b =>
                {
                    b.HasOne("HelperPlan.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HelperPlan.Models.Candidate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelperPlan.Models.Employer", b =>
                {
                    b.HasOne("HelperPlan.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HelperPlan.Models.Employer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelperPlan.Models.Subscribtion", "Subscribtion")
                        .WithMany()
                        .HasForeignKey("SubscribtionID");

                    b.Navigation("Subscribtion");
                });

            modelBuilder.Entity("HelperPlan.Models.Plan", b =>
                {
                    b.Navigation("Subscribtion");
                });

            modelBuilder.Entity("HelperPlan.Models.Candidate", b =>
                {
                    b.Navigation("CookingSkills");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Languages");

                    b.Navigation("MainSkills");

                    b.Navigation("OtherSkills");
                });

            modelBuilder.Entity("HelperPlan.Models.Employer", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("SubscribtionHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
